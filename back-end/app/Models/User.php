<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use App\Models\Routine;
use App\Models\Teacher;
use Laravel\Sanctum\HasApiTokens;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable, HasApiTokens, SoftDeletes;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
        'phone',
        'status',
        'email_verified_at',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    // teacher associated with the user
    public function teacher()
    {
        return $this->hasOne(Teacher::class);
    }

    // get the routines generated by this user
    public function generatedRoutine()
    {
        return $this->hasMany(Routine::class, 'generated_by');
    }

    // get the routine notification if this user is teacher
    public function routineNotification()
    {
        return $this->hasMany(RoutineNotification::class, 'teacher_id');
    }

    /* 
        check users : super_admin , admin and teacher
    */
    public function isSuperAdmin(): bool
    {
        return $this->role === 'super_admin';
    }

    public function isAdmin(): bool
    {
        return $this->role === 'admin';
    }

    public function isTeacher(): bool
    {
        return $this->role === 'teacher';
    }

    // to check if user has specific role
    public function hasRole(string $role): bool
    {
        return $this->role === $role;
    }

    // to check if user has any of the given role
    public function hasAnyRole(array $roles): bool
    {
        return in_array($this->role, $roles);
    }

    // ===== Scopes ======

    // scope to filter users by role
    public function scopeRole($query, string $role)
    {
        return $query->where('role', $role);
    }

    // scope to filter active users
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }
}
